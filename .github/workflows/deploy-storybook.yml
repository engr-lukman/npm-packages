name: Deploy Storybook to GitHub Pages

# This workflow automatically builds and deploys Storybook to GitHub Pages
# Triggers:
# - When pushing to main branch with changes to package.json
# - When a pull request to main branch is merged with changes to package.json
on:
  push:
    branches: 
      - "main"  # Triggers on the main branch
    paths:
      - 'package.json'
  pull_request:
    types: [closed]
    branches:
      - "main"
    paths:
      - 'package.json'

jobs:
  # First job: Check if the package version has been updated
  check-version-change:
    runs-on: ubuntu-latest
    # Only proceed when directly pushing to main branch or when PRs are actually merged
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch last 2 commits to compare versions

      - name: Check if version changed
        id: check
        run: |
          # For pull requests, compare base and head commits
          # For direct pushes, compare with the previous commit
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin ${{ github.base_ref }} --depth=1
            PREVIOUS_COMMIT=$(git rev-parse FETCH_HEAD)
            CURRENT_COMMIT=${{ github.sha }}
          else
            PREVIOUS_COMMIT=$(git rev-parse HEAD^1)
            CURRENT_COMMIT=$(git rev-parse HEAD)
          fi
          
          # Extract and compare package versions between commits
          PREVIOUS_VERSION=$(git show $PREVIOUS_COMMIT:package.json | grep '"version":' | cut -d '"' -f 4)
          CURRENT_VERSION=$(git show $CURRENT_COMMIT:package.json | grep '"version":' | cut -d '"' -f 4)
          
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          # Set the current version as output for use in summary
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Determine whether to deploy based on version change
          if [ "$PREVIOUS_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Package version updated from $PREVIOUS_VERSION to $CURRENT_VERSION. Will deploy."
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Package version unchanged ($CURRENT_VERSION). Skipping deployment."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Summary when version unchanged
        if: steps.check.outputs.version_changed == 'false'
        run: |
          echo "## ⚠️ Deployment Skipped" >> $GITHUB_STEP_SUMMARY
          echo "Package version was not changed in this commit. Storybook deployment was skipped." >> $GITHUB_STEP_SUMMARY

  # Second job: Build and deploy Storybook to GitHub Pages
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: check-version-change
    # Only deploy if the version was actually changed
    if: needs.check-version-change.outputs.version_changed == 'true'
    permissions:
      contents: read
      pages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true  # Persist GitHub credentials for deployment

      # Use Node.js 20 LTS
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Storybook
        run: npm run build-storybook  # Generates static files in storybook-static folder
        
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: storybook-static  # Directory containing the static build output
          branch: gh-pages          # Branch to deploy to (GitHub Pages reads from this branch)
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication
          
      - name: Deployment summary
        run: |
          echo "## ✅ Storybook Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "Storybook v${{ needs.check-version-change.outputs.current_version }} has been deployed to GitHub Pages." >> $GITHUB_STEP_SUMMARY
          echo "You can view it at: https://engr-lukman.github.io/npm-packages/" >> $GITHUB_STEP_SUMMARY